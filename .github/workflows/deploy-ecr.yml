name: Deploy to ECR

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          docker build --build-arg ENVIRONMENT=dev --build-arg SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" -t "$ECR_REGISTRY/$ECR_REPOSITORY:latest" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Output image URI
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
        run: |
          echo "Image pushed to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Also tagged as: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Generate imagedefinitions.json for ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
          ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}
        run: |
          set -euo pipefail
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Generating imagedefinitions.json for container '$ECS_CONTAINER_NAME'..."
          printf '[{"name":"%s","imageUri":"%s"}]\n' "$ECS_CONTAINER_NAME" "$IMAGE_URI" > imagedefinitions.json
          cat imagedefinitions.json

      - name: Upload imagedefinitions.json to S3 (trigger CodePipeline)
        env:
          CP_S3_BUCKET: ${{ secrets.CP_S3_BUCKET }}
          CP_S3_KEY: ${{ secrets.CP_S3_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${CP_S3_BUKET:-}" ] || [ -z "${CP_S3_KEY:-}" ]; then
            echo "CP_S3_BUCKET and CP_S3_KEY secrets must be set to upload imagedefinitions.json"
            exit 1
          fi
          echo "Uploading imagedefinitions.json to s3://$CP_S3_BUCKET/$CP_S3_KEY"
          aws s3 cp imagedefinitions.json "s3://$CP_S3_BUCKET/$CP_S3_KEY"
